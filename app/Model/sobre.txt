### Os models aqui estão servindo para conexões com o banco, onde a maioria de seus métodos tem esse intuito
#Sendo as classes:

+ Conexão, classe responsável por métodos relacionados a conexão com banco de dados e reconstrução do mesmo

+ Sala, Guiche e Senha, classes responsáveis por métodos relacionados a suas respectivas tabelas, adicionando, atualizando e etc

Os models serão utilizados após o fluxo passar dos controllers, onde de acordo com a função chamada realizará uma função

A maior parte das funções estão com os nomes mais esclarecedores possíveis, mas diversas funções podem ser reestruturadas
e quebradas em outras, para um melhor fluxo e entendimento

Exemplo de código comentado:

public function getSenhas($valor, $limit){
    #esse é o metodo getSenhas, responsável por trazer as últimas senhas chamadas, seu fluxo funciona 
    #em conjunto com o paramêtro $valor, que de acordo com a string nele, define o comando a ser executado
    #há melhores estruturas para encaixar esse fluxo, uma vez que, sua refatoração com essa estrutura
    #se torna difícil
    
            $pdo = Conexao::conexao();
            $senhas = array();
            if($valor == "Matricula") {
                $comAM = "SELECT senha, statusSenha as 'status', idSenha as id, tipoSenha as tipo FROM `tbsenha`
                 WHERE (statusSenha =1 AND tipoSenha = 'Triagem')
                
                ORDER BY updateAt DESC
                LIMIT $limit";
            } 
            else if($valor == "Matricula-Atendidos"){
                $comAM = "SELECT senha, statusSenha as 'status', idSenha as id, tipoSenha as tipo FROM `tbsenha`
                 WHERE  (statusSenha = 1 AND tipoSenha = 'Matricula') OR (statusSenha != 0 AND tipoSenha = 'Apm')
                ORDER BY updateAt DESC
                LIMIT $limit";
            }
            else if($valor == "Matricula-Nao"){
                $comAM = "SELECT senha, statusSenha as 'status', idSenha as id, tipoSenha as tipo FROM `tbsenha`
                 WHERE  (statusSenha = 2 AND tipoSenha = 'Matricula') 
                ORDER BY updateAt DESC
                LIMIT $limit";
            }
            else if($valor == "Apm"){
                $comAM = "SELECT senha, statusSenha as 'status', idSenha as id, tipoSenha as tipo FROM `tbsenha`
                 WHERE (statusSenha =1 AND tipoSenha = 'Matricula')
                  
                ORDER BY updateAt DESC
                LIMIT $limit";
            }
            else if($valor == "Apm-Atendidas"){
                $comAM = "SELECT senha, statusSenha as 'status', idSenha as id, tipoSenha as tipo FROM `tbsenha`
                 WHERE (statusSenha =1 AND tipoSenha = 'Apm')
                  
                ORDER BY updateAt DESC
                LIMIT $limit";
            }
            else if($valor == "Apm-Nao"){
                $comAM = "SELECT senha, statusSenha as 'status', idSenha as id, tipoSenha as tipo FROM `tbsenha`
                 WHERE (statusSenha =2 AND tipoSenha = 'Apm')
                  
                ORDER BY updateAt DESC
                LIMIT $limit";
            } else if($valor == "Apm-All"){
                $comAM = "SELECT senha, statusSenha as 'status', idSenha as id, tipoSenha as tipo, updateAt as ua FROM `tbsenha`
                 WHERE (statusSenha !=0 AND tipoSenha != 'Triagem')
                  
                ORDER BY updateAt DESC
                LIMIT $limit";
            } else {
                $comAM = "SELECT  senha, statusSenha as 'status', idSenha as id, tipoSenha as tipo, updateAt as ua  FROM tbsenha
                WHERE statusSenha !=0
                
                ORDER BY updateAt DESC
                LIMIT $limit";
            }
            $stmt = $pdo->prepare($comAM);
            $stmt->execute();
            if($stmt->rowCount() > 0){
                $senhas = $stmt->fetchAll(PDO::FETCH_ASSOC);
            }else{
                return false;
            }
            return $senhas;
        }